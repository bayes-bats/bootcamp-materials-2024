---
title: "Good workflow practices"
subtitle: "Prerequisites"
execute:
  echo: true
format: 
  revealjs:
    slide-number: true
    incremental: true
    theme: ["../../templates/slides-style.scss"]
    logo: https://www.stat.uci.edu/bayes-bats/img/logo.png
    title-slide-attributes: 
      data-background-image: https://www.stat.uci.edu/bayes-bats/img/logo.png
      data-background-size: 12%
      data-background-position: 50% 75%
---

## Naming files

::: {.nonincremental}

Three principles of naming files 

- machine readable
- human readable
- plays well with default ordering (e.g. alphabetical and numerical ordering)

(Jenny Bryan)

for the purposes of this bootcamp an additional principle is that file names follow

- tidyverse style (all lower case letters, words separated by HYPHEN)

:::

## README.md

- README file is the first file users read. In our case a user might be our future self, a teammate, or (if open source) anyone.



- There can be multiple README files within a single directory: e.g. for the general project folder and then for a data subfolder. Data folder README's can possibly contain codebook (data dictionary).



- It should be brief but detailed enough to help user navigate. 



- a README should be up-to-date (can be updated throughout a project's lifecycle as needed).



- On GitHub we use markdown for README file (`README.md`). Good news: [emojis are supported.](https://gist.github.com/rxaviers/7360908)



## README examples

- [ICS 80 website](https://github.com/ics80-fa21/website)
- [Museum of Modern Art Collection](https://github.com/MuseumofModernArt/collection)
- [R package bayesrules](https://github.com/bayes-rules/bayesrules)

## R Packages

__Default__

```{r echo=FALSE, out.width='60%'}
knitr::include_graphics('img/office-suite-default.png')
```



Microsoft products have Copyright. Images used based on [fair use](https://www.microsoft.com/en-us/legal/copyright/default.aspx) for educational purposes.

## R Packages

__Optional__

```{r echo=FALSE, out.width='60%'}
knitr::include_graphics('img/office-suite-optional.png')
```


## R packages


- When you download R, you actually download base R. 



- But there are MANY optional packages you can download.


- Good part: There is an R package for (almost) everything, from complex statistical modeling packages to baby names.



- Bad part: At the beginning it can feel overwhelming. 

- All this time we have actually been using R packages. 


## R packages

What do R packages have? All sorts of things but mainly

- functions 

- datasets


## R packages

Try running the following code:

```{r error = TRUE}
beep()
```

Why are we seeing this error? 



:::{.font75}

Installing packages

:::


## Using `install.packages()`

In your **Console**, install the beepr package

```{r eval = FALSE}
install.packages("beepr")
```

We do this in the Console because we only need to do it once.



## Using Packages pane

```{r echo = FALSE, out.width="40%", fig.align='center'}
knitr::include_graphics("img/packages-pane.png")
```

Packages Pane > Install 



## Letting RStudio Install

```{r echo = FALSE, out.width="80%", fig.align='center'}
knitr::include_graphics("img/rstudio-install.png")
```

If you save your file and using a package RStudio will tell you that you have not installed the package.




:::{.font75}

Using packages

:::



## Using beep() from beepr


Option 1
```{r warning = FALSE, eval = FALSE}
library(beepr)
beep()
```

More common usage. 

Useful if you are going to use multiple functions from the same package.
E.g. we have used many functions (ggplot, aes, geom_...) from the ggplot2 package. In such cases, usual practice is to put the library name in the first R chunk in the .Rmd file.



## Using beep() from beepr

Option 2

```{r eval = FALSE}
beepr::beep()
```
Useful when you are going to use a function once or few times. Also useful if there are any conflicts. For instance if there is some other package in your environment that has a beep() function that prints the word beep, you would want to distinguish the beep function from the beepr package and the beep function from the other imaginary package. 

##

```{r echo=FALSE, fig.align='center', out.width="80%"}
knitr::include_graphics("img/beep-help.png")
```


## Open Source

- Any one around the world can create R packages. 



- Good part: We are able to do pretty much anything R because someone from around the world has developed the package and shared it. 


- Bad part: The language can be inconsistent. 


- Good news: We have tidyverse. 



## Tidyverse


>The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. 
                  tidyverse.org


## Tidyverse

In short, tidyverse is a family of packages. From practical stand point, you can install many tidyverse packages at once (and you did this). By doing that you installed all the following packages.

- ggplot2
- dplyr
- tidyr
- readr
- purrr
- tibble
- stringr
- forcats

##

We can also load multiple tidyverse packages all at the same time.

```{r message = TRUE}
library(tidyverse)
```



## Fun fact

:::: {.columns}

::: {.column width="50%"}


```{r message = FALSE}
library(magrittr)
```


```{r echo=FALSE, out.width='40%', fig.align='center'}
knitr::include_graphics('img/pipe-logo.png')
```

:::


::: {.column width="50%"}

[Treachery of Images](https://en.wikipedia.org/wiki/The_Treachery_of_Images#/media/File:MagrittePipe.jpg) by Ren√© Magritte

```{r echo=FALSE, out.width='70%', fig.align='center'}
knitr::include_graphics('img/magritte.jpg')
```

Image for Treachery of Images is from University of Alabama [website](https://tcf.ua.edu/Classes/Jbutler/T311/Modernism.htm) and used under fair use for educational purposes.

:::

::::


## Importing .csv Data 


```{r}
#| echo: true
#| eval: false
readr::read_csv("dataset.csv")
```


## Importing Excel Data

```{r}
#| echo: true
#| eval: false
readxl::read_excel("dataset.xlsx")
```


## Importing Excel Data

```{r}
#| echo: true
#| eval: false
readxl::read_excel("dataset.xlsx", sheet = 2)
```


## Importing SAS, SPSS, Stata Data

```{r}
#| echo: true
#| eval: false
library(haven)
# SAS
read_sas("dataset.sas7bdat")
# SPSS
read_sav("dataset.sav")
# Stata
read_dta("dataset.dta")
```


## Where is the dataset file?

Importing data will depend on where the dataset is on your computer. However we use the help of `here::here()` function. 
This function sets the working directory to the project folder (i.e. where the `.Rproj` file is).

```{r}
#| echo: true
#| eval: false
read_csv(here::here("data/dataset.csv"))
```

## Collaboration on GitHub

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.002.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.003.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.004.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.005.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.006.jpeg")
```

## Collaboration on GitHub

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.007.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.008.jpeg")
```

## Collaboration on GitHub

If each change is made by one collaborator at a time, this would not be an efficient workflow. 

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.009.jpeg")
```

## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.010.jpeg")
```

## Collaboration on GitHub

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.011.jpeg")
```

## Collaboration on GitHub

1 - commit

2 - pull (very important)

3 - push


## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.013.jpeg")
```


## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.014.jpeg")
```


## Collaboration on GitHub


```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/git-collab.015.jpeg")
```


## Opening an issue

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/create-issue.png")
```

We can create an **issue** to keep a list of mistakes to be fixed, ideas to check with teammates, or note a to-do task. You can assign tasks to yourself or teammates. 

## Closing an issue

```{r}
#| echo: false
#| out-width: "90%"
knitr::include_graphics("img/issue-number.png")
```

If you are working on an issue, it makes sense to refer to issue number in your commit message (e.g. "add first draft of alternate texts for #4"). 
If your commit resolves the issue then you can use key words such as "fixes #4" or "closes #4" to close the issue. 
Issues can also be manually closed.

##

It is also a good practice to save session information as package versions change, in order to be able to reproduce results from an analysis we need to know under what technical conditions the analysis was conducted.

```{r}
#| echo: true
sessionInfo()
```



