---
title: "Evaluating <br> regression models"
subtitle: "Day 4"
execute:
  echo: true
format: 
  revealjs:
    slide-number: true
    incremental: true
    theme: ["../../templates/slides-style.scss"]
    logo: https://www.stat.uci.edu/bayes-bats/img/logo.png
    title-slide-attributes: 
      data-background-image: https://www.stat.uci.edu/bayes-bats/img/logo.png
      data-background-size: 12%
      data-background-position: 50% 85%
---

Note that examples in this part of the lecture are a simplified version of [Chapter 10 of Bayes Rules! book](https://www.bayesrulesbook.com/chapter-10.html).


## Packages

```{r}
library(bayesrules)
library(tidyverse)
library(rstanarm)
library(bayesplot)
```

##

1. __How fair is the model?__ How was the data collected? By whom and for what purpose? How might the results of the analysis, or the data collection itself, impact individuals and society? What biases or power structures might be baked into this analysis?   
  


2. __How wrong is the model?__  George Box famously said: “All models are wrong, but some are useful.” What’s important to know then is, how wrong is our model? Are our model assumptions reasonable?



3. __How accurate are the posterior predictive models?__    



## Checking Model Assumptions


$$Y_i | \beta_0, \beta_1, \sigma \stackrel{ind}{\sim} N(\mu_i, \sigma^2) \;\; \text{ with } \;\; \mu_i = \beta_0 + \beta_1 X_i  .$$

1. Conditioned on $X$, the observed __data__ $Y_i$ on case $i$ is _independent_ of the observed data on any other case $j$.
2. The typical $Y$ outcome can be written as a _linear function_ of $X$, $\mu = \beta_0 + \beta_1 X$.
3. At any $X$ value, $Y$ __varies normally__ around $\mu$ with consistent variability $\sigma$. 



## Independence


_When taken alone_, ridership $Y$ is likely correlated over time -- today's ridership likely tells us something about tomorrow's ridership.
Yet much of this correlation, or dependence, can be explained by the time of year and features associated with the time of year -- like temperature $X$.
Thus, knowing the _temperature_ on two subsequent days may very well "cancel out" the time correlation in their ridership data.


## Linearity and Constant Variance

```{r}
#| echo: false
#| message: false
#| fig-height: 3
#| fig.align: center
ggplot(bikes, aes(y = rides, x = temp_feel)) + 
  geom_point(size = 0.2) + 
  geom_smooth(method = "lm", se = FALSE)
```

The relationship between ridership and temperature does appear to be linear. Further, with the slight exception of colder days on which ridership is uniformly small, the variability in ridership does appear to be roughly consistent across the range of temperatures $X$.

## Posterior predictive check

Consider a regression model with response variable $Y$, predictor $X$, and a set of regression parameters $\theta$. For example, in the model in the previous slides $\theta = (\beta_0,\beta_1,\sigma)$.  Further, let $\left\lbrace \theta^{(1)}, \theta^{(2)}, \ldots, \theta^{(N)}\right\rbrace$ be an $N$-length Markov chain for the posterior model of $\theta$.
Then a "good" Bayesian model will produce _predictions_ of $Y$ with features similar to the _original_ $Y$ data.  To evaluate whether your model satisfies this goal:

1. At each set of posterior plausible parameters $\theta^{(i)}$, simulate a sample of $Y$ values from the likelihood model, one corresponding to each $X$ in the original sample of size $n$.  This produces $N$ separate samples of size $n$.
2. Compare the features of the $N$ simulated $Y$ samples, or a subset of these samples, to those of the original $Y$ data.

##

```{r}
#| cache: true
bike_model <- stan_glm(rides ~ temp_feel, data = bikes,
                       family = gaussian,
                       prior_intercept = normal(5000, 1000),
                       prior = normal(100, 40), 
                       prior_aux = exponential(0.0008),
                       chains = 4, iter = 5000*2, seed = 84735, refresh = FALSE)
bike_model_df <- as.data.frame(bike_model)


```


##

```{r}
first_set <- head(bike_model_df, 1)
beta_0 <- first_set$`(Intercept)`
beta_1 <- first_set$temp_feel
sigma  <- first_set$sigma
set.seed(84735)
one_simulation <- bikes %>% 
  mutate(mu = beta_0 + beta_1 * temp_feel,
         simulated_rides = rnorm(500, mean = mu, sd = sigma)) %>% 
  select(temp_feel, rides, simulated_rides)

head(one_simulation, 2)

```


##

```{r}
#| eval: false
ggplot(one_simulation, aes(x = simulated_rides)) + 
  geom_density(color = "lightblue") + 
  geom_density(aes(x = rides), color = "darkblue")
```


##

```{r}
#| echo: false
ggplot(one_simulation, aes(x = simulated_rides)) + 
  geom_density(color = "lightblue") + 
  geom_density(aes(x = rides), color = "darkblue")
```

One posterior simulated dataset of ridership (light blue) along with the actual observed ridership data (dark blue)

##

```{r}
#| cache: true 
# Examine 50 of the 20000 simulated samples
pp_check(bike_model, nreps = 50) + 
  xlab("rides")
```



## How accurate are the posterior predictive models?

```{r}
bikes %>% 
  filter(date == "2012-10-22") %>% 
  select(temp_feel, rides)
```



```{r}
set.seed(84735)
predict_75 <- bike_model_df %>% 
  mutate(mu = `(Intercept)` + temp_feel*75) %>% 
  mutate(y_new = rnorm(20000, mu, sigma))
```

##

```{r}
#| echo: false
# Plot the posterior predictive model
ggplot(predict_75, aes(x = y_new)) + 
  geom_density() +
  geom_vline(xintercept = 6228)
```


##

```{r}
predict_75 %>% 
  summarize(mean = mean(y_new), error = 6228 - mean(y_new))
```


##

__observed value__: $Y$  
__posterior predictive mean__: $Y'$  
__predictive error__: $Y - Y'$

##


```{r}
predict_75 %>% 
  summarize(mean = mean(y_new), error = 6228 - mean(y_new))
```

##

```{r}
predict_75 %>% 
  summarize(sd = sd(y_new), error = 6228 - mean(y_new),
            error_scaled = error / sd(y_new))
```

##

```{r}
predict_75 %>% 
  summarize(lower_95 = quantile(y_new, 0.025),
            lower_50 = quantile(y_new, 0.25),
            upper_50 = quantile(y_new, 0.75),
            upper_95 = quantile(y_new, 0.975))
```

##

```{r}
set.seed(84735)
predictions <- posterior_predict(bike_model, newdata = bikes)

dim(predictions)

```

##

```{r}
#| eval: false
ppc_intervals(bikes$rides, yrep = predictions, x = bikes$temp_feel, 
              prob = 0.5, prob_outer = 0.95)
```

```{r}
#| cache: true
#| echo: false
set.seed(7)
index <- sample(1:500, size = 25)
bikes_small <- bikes[index,]
predictions_small <- predictions[,index]
g1 <- bayesplot::ppc_intervals(bikes$rides, 
  yrep = predictions, 
  x = bikes$temp_feel, 
  prob = 0.5, prob_outer = 0.95)
g2 <- bayesplot::ppc_intervals(bikes_small$rides, 
  yrep = predictions_small, 
  x = bikes_small$temp_feel, 
  prob = 0.5, prob_outer = 0.95)
ggpubr::ggarrange(g1,g2,ncol=2, common.legend = TRUE, legend = "right")
```




##


Let $Y_1, Y_2, \ldots, Y_n$ denote $n$ _observed_ outcomes.  Then each $Y_i$ has a corresponding posterior predictive model with _mean_ $Y_i'$ and _standard deviation_ $\text{sd}_i$.  We can evaluate the overall posterior predictive model quality by the following measures:

- `mae`    
    The __median absolute error (MAE)__ measures the _typical_ difference between the observed $Y_i$ and their posterior predictive means $Y_i'$, 

    $$\text{MAE} = \text{median}|Y_i - Y_i'|.$$
    
##

- `mae_scaled`    
    The __scaled median absolute error__ measures the _typical_ number of standard deviations that the observed $Y_i$ fall from their posterior predictive means $Y_i'$:

    $$\text{MAE scaled} = \text{median}\frac{|Y_i - Y_i'|}{\text{sd}_i}.$$

- `within_50` and `within_95`    
    The `within_50` statistic measures the proportion of observed values $Y_i$ that fall within their 50% posterior prediction interval.  The `within_95` statistic is similar, but for 95% posterior prediction intervals.


##

 
```{r}
#| cache: true
# Posterior predictive summaries
prediction_summary(bike_model, data = bikes)
```

## The k-fold cross validation algorithm

1. __Create folds.__ Let $k$ be some integer from 2 to our original sample size $n$. Split the data into $k$ __folds__, or subsets, of roughly equal size.    
    
2. __Train and test the model.__    
    - _Train_ the model using the first $k - 1$ data folds combined.
    - _Test_ this model on the $k$th data fold.
    - Measure the prediction quality (eg: by MAE).
    
3. __Repeat.__ Repeat step 2 $k - 1$ times, each time leaving out a different fold for testing.
    
4. __Calculate cross-validation estimates.__ Steps 2 and 3 produce $k$ different training models and $k$ corresponding measures of prediction quality. _Average_ these $k$ measures to obtain a single cross-validation estimate of prediction quality.
    
##

```{r}
#| cache: true
set.seed(84735)
cv_procedure <- prediction_summary_cv(
  data = bikes, model = bike_model, k = 10)
```

##

```{r}
cv_procedure$folds
```


##

```{r}
cv_procedure$cv
```

##

Note that examples in this part of the lecture are a simplified version of [Chapter 11 of Bayes Rules! book](https://www.bayesrulesbook.com/chapter-11.html).


## Data

```{r}
weather_WU <- weather_australia %>% 
  filter(location %in% c("Wollongong", "Uluru")) %>%
  mutate(location = droplevels(as.factor(location))) %>% 
  select(location, windspeed9am, humidity9am, 
    pressure9am, temp9am, temp3pm)
```

. . . 

```{r}
glimpse(weather_WU)
```

## 


```{r fig.height=6}
ggplot(weather_WU, aes(x = temp9am, y = temp3pm)) +
  geom_point()
```

## 

$\text{likelihood model:} \; \; \; Y_i | \beta_0, \beta_1, \sigma \;\;\;\stackrel{ind}{\sim} N\left(\mu_i, \sigma^2\right)\text{ with } \mu_i = \beta_0 + \beta_1X_{i1}$

$\text{prior models:}$ 

$\beta_0\sim N(\ldots, \ldots )$  
$\beta_1\sim N(\ldots, \ldots )$  
$\sigma \sim \text{Exp}(\ldots)$


## 



```{r}
#| cache: true
weather_model_1 <- stan_glm(
  temp3pm ~ temp9am, 
  data = weather_WU, family = gaussian,
  prior_intercept = normal(25, 5),
  prior = normal(0, 2.5, autoscale = TRUE), 
  prior_aux = exponential(1, autoscale = TRUE),
  chains = 4, iter = 5000*2, seed = 84735, refresh = FALSE)
```



## 


```{r}
#| fig-width: 15
mcmc_dens_overlay(weather_model_1)
```

## 




```{r}
posterior_interval(weather_model_1, prob = 0.80)
```

## 




```{r}
pp_check(weather_model_1)
```

## 



### Considering a categorical predictor

```{r}
#| fig-width: 10
#| fig-height: 5
ggplot(weather_WU, aes(x = temp3pm, fill = location)) +
  geom_density(alpha = 0.5)
```

## 



$$X_{i2} = \begin{cases}
1 & \text{ Wollongong} \\
0 & \text{ otherwise (ie. Uluru)} \\
\end{cases}$$

## 



$\text{likelihood model:} \; \; \; Y_i | \beta_0, \beta_1, \sigma \;\;\;\stackrel{ind}{\sim} N\left(\mu_i, \sigma^2\right)\text{ with } \mu_i = \beta_0 + \beta_1X_{i2}$

$\text{prior models:}$ 

$\beta_0\sim N(\ldots, \ldots )$  
$\beta_1\sim N(\ldots, \ldots )$  
$\sigma \sim \text{Exp}(\ldots)$

--

For Uluru, $X_{i2} = 0$ and the trend in 3pm temperature simplifies to 

$$\beta_0 + \beta_1 \cdot 0 = \beta_0 \; .$$
For Wollongong, $X_{i2} = 1$ and the trend in 3pm temperature is

$$\beta_0 + \beta_1 \cdot 1 = \beta_0 + \beta_1 \; .$$

## Simulating the Posterior

```{r}
#| cache: true
weather_model_2 <- stan_glm(
  temp3pm ~ location,
  data = weather_WU, family = gaussian,
  prior_intercept = normal(25, 5),
  prior = normal(0, 2.5, autoscale = TRUE), 
  prior_aux = exponential(1, autoscale = TRUE),
  chains = 4, iter = 5000*2, seed = 84735, refresh = FALSE)
```


## 


```{r}
#| fig-width: 15
mcmc_dens_overlay(weather_model_2)
```

## 




```{r}
# Posterior summary statistics
model_summary <- summary(weather_model_2)
head(as.data.frame(model_summary), -2) %>% 
  select(mean, "10%", "90%", Rhat)
```

. . . 

```{r}
b0 <- model_summary[1,1]
b1 <- model_summary[2,1]
```

## 




```{r}
#| fig-width: 10
#| fig-height: 5
ggplot(weather_WU, aes(x = temp3pm, fill = location)) + 
  geom_density(alpha = 0.5) + 
  geom_vline(xintercept = c(b0, b0 + b1), 
    linetype = "dashed")
```

## 




### Two Predictors

```{r}
#| message: false
#| fig-height: 5
ggplot(weather_WU, 
    aes(y = temp3pm, x = temp9am, color = location)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE)
```

## 



$\text{likelihood model:}$
$Y_i | \beta_0, \beta_1, \beta_2 \sigma \;\;\;\stackrel{ind}{\sim} N\left(\mu_i, \sigma^2\right)\text{ with } \mu_i = \beta_0 + \beta_1X_{i1} + \beta_2X_{i2}$

$\text{prior models:}$ 

$\beta_0\sim N(m_0, s_0 )$  
$\beta_1\sim N(m_1, s_1 )$  
$\beta_2\sim N(m_2, s_2 )$  
$\sigma \sim \text{Exp}(l)$

## 

 

In _Uluru_, $X_{i2} = 0$ and the trend in the relationship between 3pm and 9am temperature simplifies to

$$\beta_0 + \beta_1 X_{i1} + \beta_2 \cdot 0 = \beta_0 + \beta_1 X_{i1} \; .$$

In _Wollongong_, $X_{i2} = 1$ and the trend in the relationship between 3pm and 9am temperature simplifies to

$$\beta_0 + \beta_1 X_{i1} + \beta_2 \cdot 1 = (\beta_0 + \beta_2) + \beta_1 X_{i1} \; .$$

## 

 

```{r}
#| cache: true
weather_model_3 <- stan_glm(temp3pm ~ temp9am + location, 
                            data = weather_WU, 
                            family = gaussian, 
                            chains = 4, 
                            iter = 5000*2, 
                            seed = 84735,
                            refresh = FALSE)
```


## 


```{r}
weather_model_3_df <- as.data.frame(weather_model_3)
head(weather_model_3_df, 3)
```

## 

```{r}
#| eval: false
first_50 <- head(weather_model_3_df, 50)

ggplot(weather_WU, aes(x = temp9am, y = temp3pm)) + 
  geom_point(size = 0.01) + 
  geom_abline(data = first_50, size = 0.1,
    aes(intercept = `(Intercept)`, slope = temp9am)) + 
  geom_abline(data = first_50, size = 0.1,
    aes(intercept = `(Intercept)` + locationWollongong, 
    slope = temp9am), color = "blue")
```

## 




```{r}
#| echo: false
first_50 <- head(weather_model_3_df, 50)

ggplot(weather_WU, aes(x = temp9am, y = temp3pm)) + 
  geom_point(size = 0.01) + 
  geom_abline(data = first_50, size = 0.1,
    aes(intercept = `(Intercept)`, slope = temp9am)) + 
  geom_abline(data = first_50, size = 0.1,
    aes(intercept = `(Intercept)` + locationWollongong, 
    slope = temp9am), color = "blue")
```


```{r}
#| echo: false
stats <- posterior_interval(weather_model_3, prob = 0.80)
```

## 




```{r}
#| cache: true
# Simulate a set of predictions
set.seed(84735)
temp3pm_prediction <- posterior_predict(
  weather_model_3, 
  newdata = data.frame(
    temp9am = c(10, 10), location = c("Uluru", "Wollongong")))
```

##  Posterior Predictive Model

```{r}
#| fig-height: 4
shortcut_df <- data.frame(uluru = temp3pm_prediction[,1],
                          woll = temp3pm_prediction[,2])
ggplot(shortcut_df, aes(x = uluru)) +
  geom_density() +
  geom_density(aes(x = woll), color = "blue")
```

## 




```{r}
#| message: false
#| fig-height: 4
ggplot(weather_WU,
       aes(y = temp3pm, x = humidity9am, color = location)) + 
  geom_point(size = 0.5) +
  geom_smooth(method = "lm", se = FALSE)
```

## 



$\text{likelihood model:}$
$Y_i | \beta_0, \beta_1, \beta_2, \beta_3 \sigma \;\;\;\stackrel{ind}{\sim} N\left(\mu_i, \sigma^2\right)\text{ with }$ 
$\mu_i = \beta_0 + \beta_1X_{i2} + \beta_2X_{i3} + \beta_3X_{i2}X_{i3}$

$\text{prior models:}$ 

$\beta_0\sim N(m_0, s_0 )$  
$\beta_1\sim N(m_1, s_1 )$  
$\beta_2\sim N(m_2, s_2 )$  
$\beta_3\sim N(m_3, s_3 )$  
$\sigma \sim \text{Exp}(l)$

## 




In _Uluru_, $X_{2} = 0$ and the trend in the relationship between temperature and humidity simplifies to

$$\mu = \beta_0 + \beta_2 X_{3} \; .$$

In _Wollongong_, $X_{2} = 1$ and the trend in the relationship between temperature and humidity simplifies to

$$\mu = \beta_0 + \beta_1 + \beta_2 X_{3} + \beta_3 X_{3} = (\beta_0 + \beta_1) + (\beta_2 + \beta_3) X_3 \; .$$

## 



```{r}
#| eval: false
interaction_model <- stan_glm(temp3pm ~ location + humidity9am + 
                                location:humidity9am,
                              data = weather_WU, 
                              family = gaussian,
                              chains = 4, 
                              iter = 5000*2, 
                              seed = 84735)
```

```{r}
#| echo: false
#| cache: true
interaction_model <- stan_glm(
temp3pm ~ location + humidity9am + location:humidity9am,
data = weather_WU, family = gaussian,
chains = 4, iter = 5000*2, seed = 84735, refresh=FALSE)
```

## 



```{r}
model_summary <- summary(interaction_model)
head(as.data.frame(model_summary), -2) %>%
select(`10%`, `50%`, `90%`) %>%
round(3)
```


```{r}
#| echo: false
#| cache: true
interaction_model <- stan_glm(
  temp3pm ~ location + humidity9am + location:humidity9am, 
  data = weather_WU, family = gaussian, 
  chains = 4, iter = 5000*2, seed = 84735, refresh = 0)

model_summary <- summary(interaction_model)
post_sum <- as.data.frame(model_summary) %>% 
  select(`10%`, `50%`, `90%`) %>% 
  round(3) %>% 
  head(-2)
```


## 



$$\begin{array}{lrl}
\text{Uluru:}      & \mu & =  `r post_sum[1,2]` - `r -post_sum[3,2]` \text{ humidity9am} \\
\text{Wollongong:} & \mu & = (`r post_sum[1,2]` - `r -post_sum[2,2]`) + (`r post_sum[3,2]` + `r post_sum[4,2]`) \text{ humidity9am}\\
&& = `r post_sum[1,2] + post_sum[2,2]` + `r post_sum[3,2] + post_sum[4,2]` \text{ humidity9am}\\
\end{array}$$




## Do you need an interaction term?

- __Context.__ 

- __Visualizations.__ 

- __Hypothesis tests.__ 



## More than two predictors

$\text{likelihood model:} \; \; \; Y_i | \beta_0, \beta_1,\beta_2,...\beta_p, \sigma \;\;\;\stackrel{ind}{\sim} N\left(\mu_i, \sigma^2\right)\text{ with }$ 
$\mu_i = \beta_0 + \beta_1X_{i1} + \beta_2X_{i2} + \ldots +\beta_pX_{ip}$

$\text{prior models:}$ 

$\beta_0, \beta_1,\beta_2, ...,\beta_p\sim N(\ldots, \ldots )$  
 
$\sigma \sim \text{Exp}(\ldots)$

## 



```{r}
#| cache: true
weather_model_4 <- stan_glm(
  temp3pm ~ .,
  data = weather_WU, family = gaussian, 
  prior_intercept = normal(25, 5),
  prior = normal(0, 2.5, autoscale = TRUE), 
  prior_aux = exponential(1, autoscale = TRUE),
  chains = 4, iter = 5000*2, seed = 84735, refresh = FALSE)
```



## Model evaluation and comparison

<div align="center">

| Model             | Formula                        |
|---------|-------|
| `weather_model_1` | `temp3pm ~ temp9am`            |
| `weather_model_2` | `temp3pm ~ location`           |
| `weather_model_3` | `temp3pm ~ temp9am + location` |
| `weather_model_4` | `temp3pm ~ .`                  |

</div>

## 




```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 7
g1 <- pp_check(weather_model_1) + theme(legend.position = "bottom")
g2 <- pp_check(weather_model_2) + theme(legend.position = "bottom")
g3 <- pp_check(weather_model_3) + theme(legend.position = "bottom")
g4 <- pp_check(weather_model_4) + theme(legend.position = "bottom")
gridExtra::grid.arrange(g1,g2,g3,g4,ncol = 2)
```

## 




```{r}
#| cache: true
set.seed(84735)
predictions_1 <- posterior_predict(weather_model_1, 
  newdata = weather_WU)
```

```{r}
#| echo: false
#| cache: true
set.seed(84735)
predictions_2 <- posterior_predict(weather_model_2, 
  newdata = weather_WU)

set.seed(84735)
predictions_3 <- posterior_predict(weather_model_3, 
  newdata = weather_WU)

set.seed(84735)
predictions_4 <- posterior_predict(weather_model_4, 
  newdata = weather_WU)
```

```{r}
#| fig-width: 4
#| fig-height: 2.25
#| eval: false
# Posterior predictive models for weather_model_1
ppc_intervals(weather_WU$temp3pm, 
  yrep = predictions_1, 
  x = weather_WU$temp9am, 
  prob = 0.5, prob_outer = 0.95)

# Posterior predictive models for weather_model_2
ppc_violin_grouped(weather_WU$temp3pm, 
  yrep = predictions_2, 
  group = weather_WU$location,
  y_draw = "points")
```


## 




```{r}
#| eval: false
prediction_summary_cv(data = weather_WU, 
                      model = weather_model_1, 
                      k = 10)
```

## 






```{r}
#| echo: false
#| cache: true
set.seed(84735)
ps_1 <- prediction_summary_cv(
  data = weather_WU, model = weather_model_1, k = 10)$cv

set.seed(84735)
ps_2 <- prediction_summary_cv(
  data = weather_WU, model = weather_model_2, k = 10)$cv

set.seed(84735)
ps_3 <- prediction_summary_cv(
  data = weather_WU, model = weather_model_3, k = 10)$cv

set.seed(84735)
ps_4 <- prediction_summary_cv(
  data = weather_WU, model = weather_model_4, k = 10)$cv

post_sum_df <- data.frame(rbind(round(ps_1,3), round(ps_2,3), round(ps_3,3), round(ps_4,3)))
```


```{r}
#| echo: false
#| warning: false
test_mat <- matrix(
  c("model", "mae", "mae scaled", "within 50", "within 95", 
    "weather model 1", post_sum_df[1,],
    "weather model 2", post_sum_df[2,],
    "weather model 3", post_sum_df[3,],
    "weather model 4", post_sum_df[4,]
    ), nrow = 5, byrow = TRUE)

knitr::kable(test_mat)
```


